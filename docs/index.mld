{0 Clipper}

Clipper provides OCaml bindings to the {{:http://www.angusj.com/clipper2/Docs/Overview.htm}
Clipper2} polygon clipping (C++) library.

{%html:
  <p style="text-align:center;">
  <img src="_assets/clipper2_australia.png" style="width:100mm;"/>
  </p> %}

{1 Sub-libraries}

In addition to the the higher level abstraction provided by the main library,
the sub-librarys {{!module-C} [clipper.c]} and {{!module-Thin} [clipper.thin]}
are provided to enable lower-level access to the underlying C API.
- {!module-C} -- generated C bindings
- {!module-Thin} -- thinly wrapped bindings (pointers abstracted)

{1:api API}

{!module-Clipper} -- top level library interface

{2 Functor Parameters}

- {{!Clipper.V} [V]} -- 2d vector type (float or int64)
- {{!Clipper.Poly} [Poly]} -- polygon (outer path and zero or more inner paths) type
- {{!Clipper.Config} [Config]} -- user specifiable defaults (see:
    {{!Clipper.config} [config]})

{2 Functors}

Each functor produces instances that adhere to the signature {{!Clipper.S} [S]}.
The [D] variants take a 2d float vector type in {{!Clipper.V} [V]}, and create
bindings to the decimal interface of Clipper2, while the [64] variants do the
same but for the int64 interface.

- {{!Clipper.MakeD} [MakeD]} -- [float] interface to Clipper2
- {{!Clipper.MakeD'} [MakeD']} -- same, but additionally taking {{!Clipper.Poly} [Poly]}
- {{!Clipper.Make64} [Make64]} -- [int64] interface to Clipper2
- {{!Clipper.Make64'} [Make64']} -- same, but additionally taking {{!Clipper.Poly} [Poly]}

{1:example Example}

{[
  module C = Clipper.MakeD (struct
      type t = float * float
      let v x y = x, y
      let x t = fst t
      let y t = snd t
    end)
    ((val Clipper.config ~fill_rule:`EvenOdd ()))
  let ex =
    let a = [ 0., 0.; 10., 0.; 10., 10.; 0., 10. ] in
    let b = List.map (fun (x, y) -> x +. 5., y +. 5.) a in
    C.Paths.(to_list @@ difference (of_list [ a ]) (of_list [ b ]))
]}
